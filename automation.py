"""This script provides a command-line interface for various build and deployment tasks.

It includes the following subcommands:
- move-stubs: Moves the stub files generated by stubgen from the 'stubs' directory to their destination directories.
- generate-recipe: Generates the recipe folder used by Grayskull to build the conda-forge recipe.
- upload-to-pypi: Uploads the 'dist' directory to PyPI using Twine.
"""

import os
import shutil

import click


def move_stubs(src_dir: str, dst_dir: str) -> None:
    """Moves stubs from the source folder to appropriate level(s) of the dist hierarchy."""

    # Loops over all directories in destination and either adds a missing py.typed to the highest directory level or
    # removes py.typed from any lower directory level.
    for root, dirs, files in os.walk(dst_dir):
        level: int = len(root.split(sep=os.path.sep))
        # This is a Python package directory
        if "py.typed" not in files and level == 1:
            # Add py.typed to this package directory
            with open(os.path.join(root, "py.typed"), "w") as _:
                pass
        elif level > 1:
            dir_py_typed = os.path.join(root, "py.typed")
            if os.path.exists(dir_py_typed):
                os.remove(dir_py_typed)

    for root, _, files in os.walk(src_dir):
        for file in files:
            if file.endswith(".pyi"):
                stub_path = os.path.join(root, file)
                relative_path = os.path.relpath(stub_path, src_dir)
                source_path = os.path.join(relative_path[:-1])  # Remove the 'i' from '.pyi'

                if os.path.exists(source_path) and dst_dir in source_path:
                    dst_path = os.path.join(os.path.dirname(source_path), file)

                    # Replaces old .pyi files if they already exist
                    if os.path.exists(dst_path):
                        os.remove(dst_path)

                    shutil.move(stub_path, dst_path)


@click.group()
def cli() -> None:
    pass


@cli.command()
def process_stubs() -> None:
    """Moves the stub files generated by stubgen."""
    move_stubs(src_dir="stubs", dst_dir="src")
    move_stubs(src_dir="stubs", dst_dir="tests")
    shutil.rmtree("stubs")  # Removes the directory with all unmoved files to avoid future conflicts


@cli.command()
def generate_recipe() -> None:
    """Generates the recipe folder used by Grayskull."""
    if not os.path.exists("recipe"):
        os.makedirs("recipe")


@cli.command()
@click.option("--token-file", default=".pypirc", help="File to store the PyPI token.")
def set_pypi_token(token_file: str) -> None:
    """Checks and, if necessary, generates a .pypirc file at the root of the project to store user API token for
    pip uploads.

    The file default '.pypirc' target is added to gitignore, so there should be no private information leaking unless
    gitignore is not included."""
    if not os.path.exists(token_file):
        token = click.prompt(
            "Enter your PyPI (API) token. It will be stored inside the .pypirc file for future use:",
            hide_input=True,
        )
        with open(token_file, "w") as f:
            f.write(f"[pypi]\nusername = __token__\npassword = {token}\n")
        click.echo(f"PyPI token stored in {token_file}.")


if __name__ == "__main__":
    cli()
